<?php declare(strict_types=1);

namespace Jtl\Shop5Router\Test\Http;

use Jtl\Shop5Router\Http\Route;
use Jtl\Shop5Router\Test\Http\Controller\FooBarController;
use PHPUnit\Framework\TestCase;
use Illuminate\Http\Request;

class RouteTest extends TestCase
{
    protected Route $route;
    protected string $controllerPath = 'Jtl\Shop5Router\Test\Http\Controller';
    
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    
        $this->route = new Route($this->controllerPath, 'foo_bar.foo', null, null, null, ['foo', 'bar']);
    }
    
    public function testCanGetControllerPath(): void
    {
        self::assertEquals($this->controllerPath, $this->route->getControllerPath());
    }
    
    public function testCanSetControllerPath(): void
    {
        $this->route->setControllerPath('\Zick\Zack');
        self::assertEquals('\Zick\Zack', $this->route->getControllerPath());
    }
    
    public function testCanGetAction(): void
    {
        self::assertEquals('foo_bar.foo', $this->route->getAction());
    }
    
    public function testCanSetAction(): void
    {
        $this->route->setAction('zick.zack');
        self::assertEquals('zick.zack', $this->route->getAction());
    }
    
    public function testCanGetArguments(): void
    {
        self::assertCount(2, $this->route->getArguments());
    }
    
    public function testCanSetArguments(): void
    {
        $this->route->setArguments(['zick']);
        self::assertCount(1, $this->route->getArguments());
    }
    
    public function testCanCall(): void
    {
        $result = $this->route->call(Request::createFromGlobals());
        self::assertTrue($result);
        
        foreach ($this->route->getControllers() as $controller) {
            self::assertInstanceOf(FooBarController::class, $controller);
        }
    
        $route1 = new Route($this->controllerPath, 'foo_bar.bar', null, null, null, ['foo']);
        $route2 = new Route($this->controllerPath, 'foo_bar.foobar', null, null, null, ['foo' => 'bar']);
    
        $result1 = $route1->call(Request::createFromGlobals());
        self::assertTrue($result1);
        
        $result2 = $route2->call(Request::createFromGlobals());
        self::assertEquals('yolo', $result2);
    }
}
